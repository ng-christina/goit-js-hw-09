{"mappings":"AAyBA,SAASA,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAErBC,YAAN,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAnCFQ,SAASC,cAAc,SAE/BC,iBAAiB,UACtB,SAAsBC,GACpBA,EAAMC,iBACN,MAAOZ,MAAAa,EAAKC,KAAEA,EAAIC,OAACA,GAAUJ,EAAMK,cACnC,IAAIC,EAAeC,OAAOL,EAAMM,OAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOI,MAAOC,GAAI,EACpCtB,EAAcsB,EAAGH,GACVI,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,SAASC,OAAOC,QACd,wCAAwCzB,QAAeC,MACxD,IAEFyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBsB,SAASC,OAAOG,QACd,wBAAwB3B,QAAeC,MACxC,IAG0CiB,GAA/BC,OAAOJ,EAAKK,OAEhCQ,EAAEC,OAAOC,O","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\n\nform.addEventListener('submit', onFormSubmit);\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const {delay, step,amount} = event.currentTarget;\n  let currentDelay = Number(delay.value);\n  for (let i = 0; i < amount.value; i+= 1) {\n    createPromise(i, currentDelay)\n          .then(({ position, delay }) => {\n            Notiflix.Notify.success(\n              `:white_check_mark: Fulfilled promise ${position} in ${delay}ms`\n            );\n          })\n          .catch(({ position, delay }) => {\n            Notiflix.Notify.failure(\n              `:x: Rejected promise ${position} in ${delay}ms`\n            );\n          });\n        //додаємо до поточної затримки крок збільшення затримки\n        currentDelay += Number(step.value);\n      }\n    e.target.reset();\n}\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      //setTimeout для першої затримки delay\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n\n\n\n\n//   const form = document.querySelector('.form');\n// form.addEventListener('submit', onFormSubmit);\n// // Функція, яка на момент сабміту форми\n// // викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// // Під час кожного виклику передаємо їй номер промісу(position), що створюється,\n// // і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n// function onFormSubmit(e) {\n//   e.preventDefault();\n//   //відслідковуємо подію, тому можемо отримати доступ до інпутів через їх name\n//   const {\n//     elements: { amount, delay, step },\n//   } = e.currentTarget;\n//   //поточна затримка, буде різною на кожній ітерації\n//   //приводимо до числа\n//   let currentDelay = Number(delay.value);\n//   //створюємо цикл для створення кожного окремого проміса\n//   for (let i = 1; i <= amount.value; i += 1) {\n//     createPromise(i, currentDelay)\n//       .then(({ position, delay }) => {\n//         Notiflix.Notify.success(\n//           `:white_check_mark: Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         Notiflix.Notify.failure(\n//           `:x: Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//     //додаємо до поточної затримки крок збільшення затримки\n//     currentDelay += Number(step.value);\n//   }\n//   //чистимо форму\n//   e.target.reset();\n// }\n// // Функція createPromise поверталє один проміс, який виконується або відхиляється через delay часу.\n// // Значенням промісу є об'єкт з властивостями position і delay зі значеннями однойменних параметрів.\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     //setTimeout для першої затримки delay\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","currentTarget","currentDelay","Number","value","i","then","Notiflix","Notify","success","catch","failure","e","target","reset"],"version":3,"file":"03-promises.7fa9a103.js.map"}